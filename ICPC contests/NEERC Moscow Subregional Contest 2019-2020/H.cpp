// https://codeforces.com/gym/104847/problem/H
#include <bits/stdc++.h>
#define ALL(x) x.begin(),x.end()
#define fore(i,a,b) for(ll i=a,gmat=b;i<gmat;++i)
#define FIN ios::sync_with_stdio(0),cin.tie(0),cout.tie(0)
using namespace std;
typedef long long ll;
typedef vector<ll> vi;
typedef pair<ll,ll> ii;
typedef vector<ii> vii;
typedef tuple<ll, ll, ll> iii;

/* vector<vi> dp(1 << 20, vi(20, -1));

bool good_count(ll x, ll tam) {
  vi counts(2);
  fore(i, 0, tam) {
    counts[(x & (1 << i)) == 0]++;
  }
  return counts[0] == counts[1];
}

bool valanced(ll x, ll tam) {
  ll count = 0;
  fore(i, 0, tam) {
    if (x & (1 << i)) {
      count++;
    } else {
      if (count == 0) {
        return false;
      }
      count--;
    }
  }

  return count == 0;
}

bool rebellious(ll x, ll tam) {
  return good_count(x, tam) && !valanced(x, tam);
}

ll force(ll x, ll tam) {
  if (dp[x][tam] != -1) {
    return dp[x][tam];
  }

  ll ans = 0;
  fore(mask, 1, (1 << tam) - 1) {
    ll x0 = 0, x1 = 0;
    ll tam0 = 0, tam1 = 0;
    fore(i, 0, tam) {
      if (mask & (1 << i)) {
        if (x & (1 << i)) {
          x0 |= 1 << tam0;
        }
        tam0++;
      } else {
        if (x & (1 << i)) {
          x1 |= 1 << tam1;
        }
        tam1++;
      }
    }

    if (rebellious(x0, tam0)) {
      if (rebellious(x1, tam1)) {
        ans = 2;
        break;
      } else if (valanced(x1, tam1)) {
        ll f = force(x1, tam1);
        if (f > 0) {
          ans = min(ans, f + 1);
        }
      }
    }
  }

  dp[x][tam] = ans;
  return ans;
}

optional<pair<string, string>> force2(ll x, ll tam) {
  fore(mask, 1, (1 << tam) - 1) {
    ll x0 = 0, x1 = 0;
    ll tam0 = 0, tam1 = 0;
    fore(i, 0, tam) {
      if (mask & (1 << i)) {
        if (x & (1 << i)) {
          x0 |= 1 << tam0;
        }
        tam0++;
      } else {
        if (x & (1 << i)) {
          x1 |= 1 << tam1;
        }
        tam1++;
      }
    }

    if (rebellious(x0, tam0) && rebellious(x1, tam1)) {
      string s0, s1;
      fore(i, 0, tam) {
        if (mask & (1 << i)) {
          if (x & (1 << i)) {
            s0 += '(';
          } else {
            s0 += ')';
          }
          s1 += ' ';
        } else {
          if (x & (1 << i)) {
            s1 += '(';
          } else {
            s1 += ')';
          }
          s0 += ' ';
        }
      }

      return {{s0, s1}};
    }
  }

  return {};
}

void forcePrint() {
  for (ll tam = 2; tam < 13; tam += 2) {
    fore(x, 1, (1 << tam) - 1) {
      if (valanced(x, tam)) {
        auto f = force2(x, tam);
        if (f.has_value()) {
          string s;
          fore(i, 0, tam) {
            if (x & (1 << i)) {
              s.push_back('(');
            } else {
              s.push_back(')');
            }
          }

          cout << s << " | " << f->first << " | " << f->second << '\n';
        }
      }
    }
  }
}
 */

/** Author: Lucian Bicsi
 * Date: 2017-10-31
 * License: CC0
 * Source: folklore
 * Description: Zero-indexed max-tree. Bounds are inclusive to the left and exclusive to the right.
 * Can be changed by modifying T, f and unit.
 * Time: O(\log N)
 * Status: stress-tested
 */
struct Tree {
  typedef bool T;
  static constexpr T unit = false;
  T f(T a, T b) const { return a || b; } // (any associative fn)
  vector<T> s; int n;
  Tree(int n = 0, T def = unit) : s(2*n, def), n(n) {}
  void update(int pos, T val) {
    for (s[pos += n] = val; pos /= 2;)
      s[pos] = f(s[pos * 2], s[pos * 2 + 1]);
  }
  T query(int b, int e) const { // query [b, e)
    T ra = unit, rb = unit;
    for (b += n, e += n; b < e; b /= 2, e /= 2) {
      if (b % 2) ra = f(ra, s[b++]);
      if (e % 2) rb = f(s[--e], rb);
    }
    return f(ra, rb);
  }
};

ll first1(const Tree& t) {

  ll l = 0, r = t.n;
  while (l + 1 < r) {
    ll m = (l + r) / 2;
    if (t.query(0, m)) {
      r = m;
    } else {
      l = m;
    }
  }

  return l;
}

vector<bool> solve(string& s, const vii& queries) {
  ll n = s.size(), q = queries.size();


  Tree tl(n), tr(n);
  fore(i, 0, n) {
    tl.update(i, s[i] == ')');
    tr.update(n - i - 1, s[i] == '(');
  }

  vector<bool> ans(q);

  fore(i, 0, q) {
    auto [u, v] = queries[i];
    if (s[u] != s[v]) {
      if (u > v) {
        swap(u, v);
      }

      swap(s[u], s[v]);

      tl.update(u, s[u] == ')');
      tl.update(v, s[v] == ')');
      tr.update(n - 1 - u, s[u] == '(');
      tr.update(n - 1 - v, s[v] == '(');
    }

    ll cl = first1(tl);
    ll cr = first1(tr);

    ans[i] = (cr + 1) <= n/2 - (cl + 1) && (cl + 1) <= n/2 - (cr + 1);
  }

  return ans;
}

int main(){FIN;

  ll n, q;
  cin >> n >> q;
  string s;
  cin >> s;
  vii queries(q);
  for (auto& [u, v] : queries) {
    cin >> u >> v;
    u--, v--;
  }

  auto ans = solve(s, queries);
  for (bool b : ans) {
    cout << (b ? "Yes" : "No") << '\n';
  }

  //forcePrint();
  //cerr << force(0b01, 8) << '\n';


  return 0;
}
/*
()(())() | (   ))(  |  )((   )
()()()() | (  ) )(  |  )( (  )
()((())()) | (    ))(   |  )(((   ))
()(()()()) | (   ) )(   |  )(( (  ))
()()(()()) | (  )  )(   |  )( ((  ))
()(())(()) | (   ))(    |  )((   ())
()()()(()) | (  ) )(    |  )( (  ())
(()(()))() | ((   )))(  |   )((    )
()((()))() | (    )) (  |  )(((  ) )
(()()())() | ((  ) ))(  |   )( (   )
()(()())() | (   ) ) (  |  )(( ( ) )
(())(())() | (     ))(  |  ())((   )
()()(())() | (  )  ) (  |  )( (( ) )
(()())()() | ((  )) )(  |   )(  (  )
()(())()() | (   ))(    |  )((   )()
(())()()() | (    ) )(  |  ())( (  )
()()()()() | (  ) )(    |  )( (  )()
()(((())())) | (     ))(    |  )((((   )))
()((()()())) | (    ) )(    |  )((( (  )))
()(()(()())) | (   )  )(    |  )(( ((  )))
()()((()())) | (  )   )(    |  )( (((  )))
()((())(())) | (    ))(     |  )(((   ()))
()(()()(())) | (   ) )(     |  )(( (  ()))
()()(()(())) | (  )  )(     |  )( ((  ()))
()(())((())) | (   ))(      |  )((   (()))
()()()((())) | (  ) )(      |  )( (  (()))
(()((()))()) | ((    )))(   |   )(((    ))
()(((()))()) | (     )) (   |  )((((  ) ))
(()(()())()) | ((   ) ))(   |   )(( (   ))
()((()())()) | (    ) ) (   |  )((( ( ) ))
(()()(())()) | ((  )  ))(   |   )( ((   ))
()(()(())()) | (   )  ) (   |  )(( (( ) ))
(())((())()) | (      ))(   |  ())(((   ))
()()((())()) | (  )   ) (   |  )( ((( ) ))
(()(())()()) | ((   )) )(   |   )((  (  ))
()((())()()) | (    ))(     |  )(((   )())
(()()()()()) | ((  ) ) )(   |   )( ( (  ))
()(()()()()) | (   ) )(     |  )(( (  )())
(())(()()()) | (     ) )(   |  ())(( (  ))
()()(()()()) | (  )  )(     |  )( ((  )())
(()())(()()) | ((  ))  )(   |   )(  ((  ))
()(())(()()) | (   ))(      |  )((   ()())
(())()(()()) | (    )  )(   |  ())( ((  ))
()()()(()()) | (  ) )(      |  )( (  ()())
(()(()))(()) | ((   )))(    |   )((    ())
()((()))(()) | (    )) (    |  )(((  ) ())
(()()())(()) | ((  ) ))(    |   )( (   ())
()(()())(()) | (   ) ) (    |  )(( ( ) ())
(())(())(()) | (     ))(    |  ())((   ())
()()(())(()) | (  )  ) (    |  )( (( ) ())
(()())()(()) | ((  )) )(    |   )(  (  ())
()(())()(()) | (   ))(      |  )((   )(())
(())()()(()) | (    ) )(    |  ())( (  ())
()()()()(()) | (  ) )(      |  )( (  )(())
((()(())))() | (((   ))))(  |    )((     )
(()((())))() | ((    ))) (  |   )(((   ) )
()(((())))() | (     ))  (  |  )((((  )) )
((()()()))() | (((  ) )))(  |    )( (    )
(()(()()))() | ((   ) )) (  |   )(( (  ) )
()((()()))() | (    ) )  (  |  )((( ( )) )
((())(()))() | ((     )))(  |   ())((    )
(()()(()))() | ((  )  )) (  |   )( ((  ) )
()(()(()))() | (   )  )  (  |  )(( (( )) )
(())((()))() | (      )) (  |  ())(((  ) )
()()((()))() | (  )   )  (  |  )( ((( )) )
((()())())() | (((  )) ))(  |    )(  (   )
(()(())())() | ((   )) ) (  |   )((  ( ) )
()((())())() | (    ))(     |  )(((   ))()
((())()())() | ((    ) ))(  |   ())( (   )
(()()()())() | ((  ) ) ) (  |   )( ( ( ) )
()(()()())() | (   ) )(     |  )(( (  ))()
(())(()())() | (     ) ) (  |  ())(( ( ) )
()()(()())() | (  )  )(     |  )( ((  ))()
((()))(())() | (       ))(  |  (()))((   )
(()())(())() | ((  ))  ) (  |   )(  (( ) )
()(())(())() | (   ))(      |  )((   ())()
(())()(())() | (    )  ) (  |  ())( (( ) )
()()()(())() | (  ) )(      |  )( (  ())()
((()()))()() | (((  ))) )(  |    )(   (  )
(()(()))()() | ((   )))(    |   )((    )()
()((()))()() | (    )) (    |  )(((  ) )()
((())())()() | ((    )) )(  |   ())(  (  )
(()()())()() | ((  ) ))(    |   )( (   )()
()(()())()() | (   ) ) (    |  )(( ( ) )()
(())(())()() | (     ))(    |  ())((   )()
()()(())()() | (  )  ) (    |  )( (( ) )()
((()))()()() | (      ) )(  |  (()))( (  )
(()())()()() | ((  )) )(    |   )(  (  )()
()(())()()() | (   ))(      |  )((   )()()
(())()()()() | (    ) )(    |  ())( (  )()
()()()()()() | (  ) )(      |  )( (  )()()
*/
/*
() 1 2
(()) 3 4
()() 5 4
((())) 7 6
(()()) 11 6
()(()) 13 6
(())() 19 6
()()() 21 6
(((()))) 15 8
((()())) 23 8
(()(())) 27 8
()((())) 29 8
((())()) 39 8
(()()()) 43 8
()(()()) 45 8
(())(()) 51 8
()()(()) 53 8
((()))() 71 8
(()())() 75 8
(())()() 83 8
((((())))) 31 10
(((()()))) 47 10
((()(()))) 55 10
(()((()))) 59 10
()(((()))) 61 10
(((())())) 79 10
((()()())) 87 10
(()(()())) 91 10
()((()())) 93 10
((())(())) 103 10
(()()(())) 107 10
()(()(())) 109 10
(())((())) 115 10
()()((())) 117 10
(((()))()) 143 10
((()())()) 151 10
(()(())()) 155 10
((())()()) 167 10
(()()()()) 171 10
(())(()()) 179 10
((()))(()) 199 10
(()())(()) 203 10
(())()(()) 211 10
(((())))() 271 10
((()()))() 279 10
((())())() 295 10
((()))()() 327 10
(((((()))))) 63 12
((((()())))) 95 12
(((()(())))) 111 12
((()((())))) 119 12
(()(((())))) 123 12
()((((())))) 125 12
((((())()))) 159 12
(((()()()))) 175 12
((()(()()))) 183 12
(()((()()))) 187 12
()(((()()))) 189 12
(((())(()))) 207 12
((()()(()))) 215 12
(()(()(()))) 219 12
()((()(()))) 221 12
((())((()))) 231 12
(()()((()))) 235 12
()(()((()))) 237 12
(())(((()))) 243 12
()()(((()))) 245 12
((((()))())) 287 12
(((()())())) 303 12
((()(())())) 311 12
(()((())())) 315 12
(((())()())) 335 12
((()()()())) 343 12
(()(()()())) 347 12
((())(()())) 359 12
(()()(()())) 363 12
(())((()())) 371 12
(((()))(())) 399 12
((()())(())) 407 12
(()(())(())) 411 12
((())()(())) 423 12
(()()()(())) 427 12
(())(()(())) 435 12
((()))((())) 455 12
(()())((())) 459 12
(())()((())) 467 12
((((())))()) 543 12
(((()()))()) 559 12
((()(()))()) 567 12
(((())())()) 591 12
((()()())()) 599 12
((())(())()) 615 12
(((()))()()) 655 12
((()())()()) 663 12
((())()()()) 679 12
((()))(()()) 711 12
(((())))(()) 783 12
((()()))(()) 791 12
((())())(()) 807 12
((()))()(()) 839 12
((((()))))() 1055 12
(((()())))() 1071 12
(((())()))() 1103 12
(((()))())() 1167 12
(((())))()() 1295 12
*/